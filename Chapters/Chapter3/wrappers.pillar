!!Method Wrappers
@wrappers

A method wrapper inserts behavior before, instead or after a target method ${cite:brant1998wrappers,ducasse1999evaluating}$.
A wrapper replaces the original target method.
Each received message that should result in the invocation of the original method invokes the wrapper method instead.

!!!Definition

The wrapper is a method object.
It contains a reference to the original method, that is called the wrapped method.
It defines a beforeMethod method and an afterMethod method.
It may define an insteadMethod method.
When invoked, the wrapper first executes beforeMethod.
Then it executes the original method or, if defined, replaces it by insteadMethod.
Finally, the wrappers executes the afterMethod.

Message passing is fully controlled:
- Every invocation of the wrapped method provokes the invocation of the wrapper,
- the returned value is either the one that is returned by the execution of the wrapped method, or is controlled by the afterMethod behavior.

Wrappers are installed in the classes where the methods they wrap are defined.
When wrapped, a method M defined in a class C is replaced by a wrapper method W(M) in the method dictionary Cd of C.

In the original method dictionary Cd of class C, the original method M is associated to its selector

Cd: S -> M

When the method M is wrapped by a wrapper W, the original method M is replaced in the class dictionary by the wrapper method W(M), that becomes associated with the selector S:

Cd: S -> W(M)

When an instance of C receives a message with selector S, the lookup resolves to the wrapper method W(M) in the method dictionary Cd.
It is that wrapper method that is then executed.

!!!Example



!!!Evaluation


!!!Other documentation
