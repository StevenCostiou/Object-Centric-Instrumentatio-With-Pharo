!!Anonymous subclasses
@anonymous

Anonymous classes are nameless classes that are not registered in the system.
Like standard classes, an anonymous class inherits from a parent class and specializes some of its parent structure and behavior.
Anonymous classes are a convenient and powerful means for object-centric reflection, for example to control message passing for an individual object.

To provide us with object-centric reflection, an anonymous subclass is dynamically inserted between a target object and its original class ${cite:foote1989reflective,hinkle1993debugging}$.
The target object is then migrated to that anonymous class.
Object-centric reflective operations are implemented and applied by adding or redefining methods and structure in the anonymous class, that is now the active target object's class.

+(A) An object ''o'' is instance of a class ''C''. (B) An anonymous subclass of ''C'' implements object-centric behavior and structure, and ''o'' is migrated to that anonymous class.>file://figures/anon-classes.pdf+

The granularity of reflective operations is the method.
A typical example is to redefine a method from the target object's class in the anonymous subclass.
In this redefined method, we control how the object responds to the corresponding message.
The behavior of methods that are not redefined in the anonymous class is preserved, and message passing is not controlled in that case.

From a structural point of view, it is not transparent to the system.
First, tools and users' code needing to access objects classes will be affected.
For instance, if an object ==o== instance of a class ==C== is migrated to an anonymous class, then all users of that object requesting its class will now see the object as an instance of ==anAnonymousClassOfC==.

Second, adding instance variables to the anonymous class will obviously change the structure of the object.
The behavior of users checking for the equality of an instrumented object with other objects may be impacted.

Affected tools will be, for example, the inspector or the debugger.

It is one of the fastest known implementation for object-centric instrumentation ${cite:ducasse1999evaluating}$.

!!!Example

Anonymous subclasses are derived from the original class of the object (line 3). Methods must be manually (re)written with instrumentation and compiled in the new class (line 4-8). Then the object has to be migrated to its new class (line 10). To rollback the instrumentation, the object must be manually migrated back to its original class (line 12). The migration is not ''safe'' if more than one process is using the instrumented object.

[[[
  |person anonClass|
  person := Person new.
	anonClass := anObject class newAnonymousSubclass.
]]]

[[[
	anonClass
		compile:
			'name: aName
				self tag: aName.
				name := aName'.
]]]

[[[
	anonClass adoptInstance: person.
]]]

[[[
  anonClass superclass adoptInstance: person.
]]]


!!!Evaluation

""Strengths and weaknesses.""
;""+""
:Fastest known technique for object-centric instrumentation in Pharo
;""+""
:Interesting starting point to build solutions on top
;""-""
:No abstraction to control or to express object-centric instrumentation
;""-""
:Very low flexibility regarding the modification of the instrumentation (manual copy and removal of methods to and from anonymous classes)
;""-""
:Migration of objects to anonymous subclasses is not thread-safe

""Manipulated entity: Classes."" Behavioral variations are expressed in standard methods, compiled in anonymous classes.

""Reusability: Limited."" As an anonymous subclass is derived from the original class of an object, only instances of that same class can be migrated to the anonymous subclass. To apply the same instrumentation to an instance of another class, a new anonymous subclass must be created and the instrumented behavior must be recompiled in that subclass.

""Flexibility: None."" Instrumented methods must always be copied down to anonymous subclasses, and instrumentation must be inserted in the duplicated code. Without any tool built on top, that instrumentation is fully manual.

""Granularity: Method."" Instrumentation is implemented by recompiling modified copies of methods in anonymous subclasses. Sub-method level is achieved through manual rewriting of the method.

""Integration: Limited."" The object is migrated to an anonymous subclass, which does not break system tools. However, it is explicit that the object is now instance of an anonymous subclass. It may also break libraries and tools that use classes and class names as a discriminator.

""==Self== problem: Solved."" By design, as objects are migrated into anonymous subclasses, ==self== always references the original object.

""==Super== problem: Not solved."" There are no means to express how to resolve the lookup when a message is sent to ==super== from a method copied down in an anonymous subclass.

!!!Other documentation
The Pharo Mooc provides materials on object-centric instrumentation based on object class migration and its flavours:

- http://rmod-pharo-mooc.lille.inria.fr/MOOC/Slides/Week7/C019-W7S04-OtherReflective.pdf
- http://rmod-pharo-mooc.lille.inria.fr/MOOC/WebPortal/co/content_78.html
