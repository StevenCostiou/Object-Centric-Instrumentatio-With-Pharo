!!Talents

Talents are originally behavioral units, that can be attached to an object to add, remove or alter behavior ${cite:ressia2014talents}$. Only the object to which a talent is attached is affected by behavioral variations. The latest talent implementation relies on trait definition and anonymous subclasses. Talents can be considered as object-centric, stateful-traits.


!!!Example

Talents are based on traits. Objects can answer to the ==#addTalent:== messages (line 9), which takes a ==Trait== as parameter. All behavior defined in the trait is flattened in the object. In the following illustration, we instantiate an anonymous trait (line 3), and we compile a method in this trait (line 4-8). That method is an instrumented version of the original ==name== method of the class ==Person==. This new method replaces the original one, until the talent is removed from the object (line 10). Talents now relies on anonymous subclasses, to which behavior is flattened before objects are migrated to the anonymous class.
[[[
|person talent|
  person := Person new.
	talent := Trait new.
	talent
		compile:
			'name: aName
	       self tag: aName.
	       name := aName'.
	person addTalent: talent. "adds the talent to the object"
  person removeTalent: talent. "removes the talent from the object"
]]]


!!!Evaluation

""Strengths and weaknesses.""
;""+""
:Can reuse and compose behavior from traits
;""-""
:Inherits from traits limitations: glue code may be necessary and conflicts from composition must be solved manually
;""-""
:Is Talent addition to objects is thread-safe?

""Manipulated entity: Trait."" Behavioral variations are expressed using traits. It can be Traits defined in the image or anonymous trait instances in which specific behavior is manually compiled by the developer.

""Reusability: Yes."" A trait can be added as a Talent to any number of objects.

""Flexibility: Limited."" Using anonymous traits forces the user to manually compile code in the method. This is however necessary to achieve a sub-method granularity. Conflicts must be resolved manually when Traits are composed.

""Granularity: Method."" Traits add, remove or alter (through aliasing) the behavior of a method. It can be done at a sub-method level (''e.g.'' inserting a statement in the body of a method), but that requires manual rewriting of the method in the Trait.

""Integration: Limited."" The object is migrated to an anonymous subclass, which does not break system tools. However, it may break libraries that uses classes and class names as a discriminator.

""==Self== problem: Solved."" By design, as objects are migrated into anonymous subclasses, ==self== always references the original object.

""==Super== problem: Solved."" By flattening all methods that should be found in the super class into the anonymous subclass, and by replacing message sends to ==super== by message sends to ==self==.

!!!Other documentation
The new implementation of Talents is available and documented on Github:
- https://github.com/tesonep/pharo-talents

Documentation on Traits:
- https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md
