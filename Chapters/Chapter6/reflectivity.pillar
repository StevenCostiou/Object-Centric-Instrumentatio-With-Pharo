!!MetaLink

A metalink annotates the abstract syntax tree (AST) of a program with user-defined meta-behavior. At run-time, ''i.e.'' when the annotated node is executed, the metalink is triggered and executes the meta-behavior. To that end, a metalink is configured with a meta-object, a selector, and a list of arguments (reifications from the execution context). When the metalink is triggered, the message designated by the selector is sent to the meta-object, with the arguments list as parameter. Metalinks can annotate the AST of a method, or any sub-node of that AST, ''e.g.'' a message send or a variable read. By default, a metalink will trigger meta-behavior for all instances of the class from which a method's AST has been annotated. Metalinks can be scoped to specific objects, and an API eases the installation of metalinks on variable access (for instance and temporary variables). To scope a metalink to an object, the target AST is copied down in an anonymous subclass (Chapter *@anonymous*). The metalink is then installed on the AST copy in the anonymous class and the object is migrated to that new class. Metalinks are part of the ''Reflectivity'' library${cite:denker2008sub}$, which is included in the reflection layer of Pharo.

!!!Example
To annotate an AST, we must instantiate a ==MetaLink== and configure this instance to implement our instrumentation (line 2). First we pass to the metalink a meta-object (line 3), here the ==#object== reification. At run-time, it represents the object executing the current method in which the metalink is triggered. The selector defines the message that will be sent to the meta-object when the link is triggered. Here, it is the ==#tag:== selector (line 4). The arguments is a list of reifications from the execution context. As we are trying to capture the value that is being written in the ==name== instance variable, we ask for the ==#value== reification (line 5). The metalink is then installed on an instance of class ==Person== (line 8). The API that is used in this example will install the metalink on all write accesses to the ==name== slot of the object. At run-time, the metalink will fire every time something is written in the ==name== instance variable, ''i.e.'' send the ==#tag:== message to the ==person== object with the value being written as a parameter. The metalink can be uninstalled (line 9), removing all annotations from the AST and restoring the original behavior of the instrumented object.

[[[
|link person|
link := MetaLink new.
link metaObject: #object.
link selector: #tag:.
link arguments: #(#value).

person := Person new.
person link: link toSlotNamed: #name option: #write.
link uninstall
]]]

!!!Evaluation

""Strengths and weaknesses.""
;""+""
:Provides access to fine reifications of the execution context
;""-""
:Forces the user to manipulate the structure of the program (the AST)
;""-""
:More suited for specific rather than system-wide instrumentation
;""-""
:MetaLink installation is not thread-safe


""Manipulated entity: Metalinks."" Instances of ==MetaLink== are the means to express and install meta-behavior on the AST of a program.

""Reusability: Yes."" The same metalink can be put on any AST node, as long as the reifications asked by the user can be provided by that node. A metalink can be installed on different classes as well as on any number of specific objects at the same time.

""Flexibility: Partial."" In some cases, object-centric instrumentation by means of metalinks is non-applicable. For example, an instance variable can be accessed both in a method defined in the object's class and in the method it redefines in the super class. Installing a metalink on all accesses to that instance variable may lead to un-predictable modification of the object's behavior. Both methods have the same signature, yet both are going to be copied down for instrumentation in the anonymous subclass, to which the object will be migrated.

""Granularity: Sub-Method."" Metalinks can be installed on any sub-node of a method's AST, achieving a very fine granularity for instrumentation.

""Integration: Partial."" Object-centric instrumentation by means of metalinks can break tools relying on meta-information. Typically, tools or libraries relying on structure (class) to discriminate objects will be affected, as instrumented objects are migrated to anonymous subclasses.

""==Self== problem: Solved."" By design, as objects are migrated into anonymous subclasses, ==self== always references the original object.

""==Super== problem: Solved."" As instrumented objects are migrated to anonymous subclasses, the lookup for messages sent to ==super== is altered. In instrumented methods, that lookup is instrumented so that it always resolves in the super class of the original object's class.

!!!Other documentation
Description of the Reflectivity API:
- https://github.com/SquareBracketAssociates/Booklet-Reflectivity
