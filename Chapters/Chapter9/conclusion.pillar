pwd!!Towards an object-centric debugger in Pharo

The idea is that any object has an API.
Calling this API applies object-centric debugging operators to that object.
This API is used to implement object-centric debuggers.

In this section, we illustrate how we can implement a simple object-centric debugger using object-centric reflection.
We propose to use Reflectivity as a backend for object-centric reflection.

!!!Basic structure of the debugger

Our debugger will be composed of three superposed layers built on-top of each other.
The first and lower layer is the reflective framework that we'll use to instrument our objects.
In our example, we'll use Reflectivity.

The second and middle layer is the object-centric debugging API built using the first layer.
This second layer provides interface to instrument the object.

The third and top-level layer is the debugger API itself.
It uses the second layer to control object-centric instrumentation of the object.


!!!Implementing the object-centric debugging API
- instrument instance variable access (limitation)
- instrument methods

model: instrumenter that knows how to instrument, using the reflection layer.
The instrumenter is an object that knows how to define and apply object-centric instrumentation to an object.
This instrumenter relies on the reflection layer.

Let's define our API.
The first interface we want is an object-centric breakpoint that halts an object before executing a particular method.
We define this interface as follows:

We'll define our instrumenter object as we create new object-centric interfaces.
In this chapter, we'll focus on two examples:
- Halting a given method before they execute in a target object,
- recording values written in a given instance variable of a target object.

!!!!Implementing an object-centric breakpoint API

Let's take a simple example: imagine two points objects ==p1== and ==p2==.
[[[
point p1 := 0@2.
point p2 := 1@3.
]]]
Each of these points has two instance variables, ==x== and ==y==, that we can change by calling the ==setX:setY:== method.
Imagine that we have a bug related to point ==p1== and that we want to halt when this object executes the ==setX:setY:== method.
We don't want to put a breakpoint directly in the ==setX:setY:== method, because all points in the system will halt when that method is called.
We want only ==p1== to stop when ==setX:setY:== is called.

This breakpoint is an operator called ==haltOnCall==, defined by Ressia in his Object-Centric debugger ${cite:Ress12a}$.
It halts whenever one specific object receives a given message.
Let's define an interface for this operator in the ==Object== class:

[[[
Object>>haltOnCallTo: methodSelector
  ^ObjectCentricInstrumenter new halt: methodSelector for: self
]]]

This method installs an ==haltOnCall== breakpoint on our object, and returns the object modeling that instrumentation.
It is very important to keep a reference to that instrumenter object if we want to uninstall our breakpoint later.
This would typically be handled by a higher level tool such as a real debugger.

This method is now our top-level API, available for all objects in the system.
Thanks to this API, we can now ask any object to halt when it receives a particular message.

Now, we have to create the ==ObjectCentricInstrumenter== class and implement the ==halt:for:== method.
This class inherits from ==Object== and has three instance variables:
- ==targetObject==: the target object we instrument;
- ==metalink==: the instrumentation per se, that is a metalink as we use Reflectivity in this example;
- ==methodNode==: the AST node representing the method in the object we instrument.

[[[
Object subclass: #ObjectCentricInstrumenter
	instanceVariableNames: 'targetObject metalink methodNode'
	classVariableNames: ''
	package: 'Your-Pharo-Package'
]]]

In this class, we have to define how we install the ==haltOnCall== breakpoint on our object.
This is done through the ==halt:for:== method.
This method takes two parameters: the selector corresponding to the method to break and the object the breakpoint will affect.
First, we store the target object and we configure our metalink (l. 2).
This metalink is configured to send the message ==#now== to the ==Halt== class 'before' the execution of the entity it will instrument (l. 3-6).
Finally, we use Reflectivity's object-centric API to install that metalink on the given selector in the target object (l. 7).
When that is done, the target object will halt each time it receives the message ==methodSelector==, before executing the corresponding method.
All other objects from the system remain unaffected by the breakpoint.

[[[
ObjectCentricInstrumenter>>halt: methodSelector for: anObject
	targetObject := anObject.
	metalink := MetaLink new
		metaObject: Halt;
		selector: #now;
		control: before.
	targetObject link: metalink toMethodNamed: methodSelector
]]]

If we summarize our example, we have the following code.
We instrument our point ==p1== with an object-centric breakpoint on the ==setX:setY:== method.
We store the instrumenter object in the ==instrumenter== variable so that we can reuse it later.
Calling ==setX:setY:== this method on ==p1== will halt the system, while calling it on ==p2== or any other point will not halt.

[[[
point p1 := 0@2.
point p2 := 1@3.
instrumenter := p1 haltOnCallTo: #setX:setY:.
p1 setX: 4 setY: 2. "<- halt!"
p2 setX: 5 setY: 3. "<- no halt"
]]]

After debugging, we will probably need to uninstall our breakpoint.
As we kept a reference to the instrumenter object, we can use it to change or to remove the instrumentation it defines.
Let's define an uninstall method in the ==ObjectCentricInstrumenter== class.
This method just calls the uninstall behavior of the metalink, removing all instrumentation from the target object.

[[[
ObjectCentricInstrumenter>>uninstall
	metalink uninstall
]]]

Our little example script becomes:

[[[
point p1 := 0@2.
point p2 := 1@3.
instrumenter := p1 haltOnCallTo: #setX:setY:.
p1 setX: 4 setY: 2. "<- halt!"
p2 setX: 5 setY: 3. "<- no halt"
instrumenter uninstall.
p1 setX: 4 setY: 2. "<- no halt"
p2 setX: 5 setY: 3. "<- no halt"
]]]

!!!!Recording all values written to the field of an object

In this version we will instrument an object to record all changes in one of its instance variables

[[[
Object>>recordValuesStoredIn: instVarName
	^ObjectCentricInstrumenter new recordValuesWrittenTo: instVarName for: self

]]]





[[[
myObject

]]]

[[[
ObjectCentricCallInterceptor>>intercept:Object
after
before
instead
]]]

!!!Implementing the object-centric debugger API

!!!!Towards an object-centric debugger
