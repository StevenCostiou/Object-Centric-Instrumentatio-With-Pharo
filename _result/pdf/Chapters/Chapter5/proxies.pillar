!!Ghost

Ghost is a general and uniform proxy implementation${cite:Mart14z}$. A proxy replaces an object to control access to that object ${cite:alpert1998design}$. Object-centric instrumentation by means of proxies consist of swapping an object (and all its references) by a proxy object (and references to that proxy object). A proxy object is instance of a proxy class, in which access control is defined. Access control is generally implemented through a single interface, which is called each time a message is intercepted by the proxy. Control behavior then decides what to do with the received message.

!!!Example

In this example, we use the original implementation of Ghost ${cite:Mart14z}$.



!!!Evaluation

""Manipulated entity: Classes."" Proxies are defined and/or configured in classes which inherits from Ghost internal classes. Typically, developers subclass the base message handler from Ghost to create a proxy model that implements the wanted instrumentation. An API is provided to apply a proxy to objects.

""Reusability: Complete."" The same proxy model can be reused to instrument any kind of object with the same instrumentation. Although Ghost proxies are not meant to be composed, it should be possible to ''proxify'' a proxy, if a proper model is implemented to instrument a proxy object.

""Flexibility: Partial."" Because the user has to define a proxy model which specifies which messages are handled and/or which are not. However that allows developers to fully and transparently integrate the instrumented object into the environment.

""Granularity: Method."" A proxy intercepts messages sends to the object it ''proxifies''. It can execute instrumentation behavior before, after or instead the intercepted message. Sub-method instrumentation cannot be achieved by means of proxies.

""Integration: Full."" because meat-messages can bde efined

""==Self== problem: Implementation dependent.""

""==Super== problem: Implementation dependent."" ?

!!!Other documentation
Implementations and documentation based on the original Ghost paper ${cite:Mart14z}$:

- http://esug.org/data/ESUG2011/IWST/PRESENTATIONS/23.Mariano_Peck-Ghost-ESUG2011.pdf
- https://rmod.inria.fr/archives/papers/Mart14z-Ghost-Final.pdf
- https://gitlab.inria.fr/RMOD/Ghost
- https://github.com/guillep/avatar

Another implementation of Ghost:
- https://github.com/pharo-ide/Ghost
- http://dionisiydk.blogspot.com/2016/04/halt-next-object-call.html
