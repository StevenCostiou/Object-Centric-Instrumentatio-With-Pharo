@article{ressia2014talents,
  title={Talents: an environment for dynamically composing units of reuse},
  author={Ressia, Jorge and G{\^\i}rba, Tudor and Nierstrasz, Oscar and Perin, Fabrizio and Renggli, Lukas},
  journal={Software: Practice and Experience},
  volume={44},
  number={4},
  pages={413--432},
  year={2014},
  publisher={Wiley Online Library}
}

@inproceedings{hinkle1993debugging,
  title={Debugging objects},
  author={Hinkle, Bob and Jones, Vicki and Johnson, Ralph E},
  booktitle={The Smalltalk Report},
  year={1993},
  organization={Citeseer}
}

@inproceedings{foote1989reflective,
  title={Reflective facilities in Smalltalk-80},
  author={Foote, Brian and Johnson, Ralph E},
  booktitle={ACM Sigplan Notices},
  volume={24},
  number={10},
  pages={327--335},
  year={1989},
  organization={ACM}
}

@article{ducasse1999evaluating,
  title={Evaluating message passing control techniques in Smalltalk},
  author={Ducasse, St{\'e}phane},
  journal={Journal of Object Oriented Programming},
  volume={12},
  pages={39--50},
  year={1999},
  publisher={Citeseer}
}

@book{alpert1998design,
  title={The design patterns Smalltalk companion},
  author={Alpert, Sherman R and Brown, Kyle and Woolf, Bobby},
  year={1998},
  publisher={Addison-Wesley Longman Publishing Co., Inc.}
}

@article{Mart14z,
	Abstract = {A proxy object is a surrogate or placeholder that controls access to another target object. Proxy objects are a widely used solution for different scenarios such as remote method invocation, future objects, behavioral reflection, object databases, inter-languages communications and bindings, access control, lazy or parallel evaluation, security, among others. Most proxy implementations support proxies for regular objects but are unable to create proxies for objects with an important role in the runtime infrastructure such as classes or methods. Proxies can be complex to install, they can have a significant overhead, they can be limited to certain kind of classes, etc. Moreover, proxy implementations are often not stratified and they do not have a clear separation between proxies (the objects intercepting messages) and handlers (the objects handling interceptions). In this paper, we present Ghost: a uniform and general-purpose proxy implementation for the Pharo programming language. Ghost provides low memory consuming proxies for regular objects as well as for classes and methods.
When a proxy takes the place of a class, it intercepts both the messages received by the class and the lookup of methods for messages received by its instances. Similarly, if a proxy takes the place of a method, then the method execution is intercepted too.},
	Aeres = {ACL},
	Annote = {internationaljournal},
	Author = {Mariano Martinez Peck and Noury Bouraqadi and Luc Fabresse and Marcus Denker and Camille Teruel},
	Hal-Id = {hal-01081236},
	Journal = {Journal of Object Technology},
	Pages = {339-359},
	Volume = {98},
	Issue = {3},
	Doi = {10.1016/j.scico.2014.05.015},
	Selectif = {oui},
	Title = {Ghost: A Uniform and General-Purpose Proxy Implementation},
	Url = {http://rmod.inria.fr/archives/papers/Mart14z-Ghost-Final.pdf},
	X-Language = {EN},
    Year = {2015}}
